{"version":3,"sources":["components/Fruit.jsx","components/FruitForm.jsx","App.js","index.js"],"names":["Fruit","props","fruitInfo","nom","onClick","onFruitDelete","id","FruitForm","handleAdd","useState","nouveauFruit","setNouveauFruit","action","onSubmit","event","preventDefault","Date","getTime","value","type","placeholder","onChange","console","log","target","App","fruits","setFruits","handleDeleteFruit","fruitCopyUpdated","filter","fruit","map","addFruit","fruitsCopy","push","rootElement","document","getElementById","createRoot","render"],"mappings":"uKAAe,SAASA,EAAMC,GAO5B,OACE,+BACGA,EAAMC,UAAUC,IAAK,IACtB,wBAAQC,QAAS,kBAAMH,EAAMI,cAAcJ,EAAMC,UAAUI,GAAG,EAAC,SAAC,QAGtE,CCXe,SAASC,EAAU,GAAgB,IAAdC,EAAS,EAATA,UAElC,EAAwCC,mBAAS,KAAI,mBAA9CC,EAAY,KAAEC,EAAe,KAqBpC,OACE,uBAAMC,OAAO,SAASC,SAnBE,SAACC,GACzBA,EAAMC,iBAIN,IAAMT,GAAK,IAAIU,MAAOC,UAItBT,EAFiB,CAAEF,KAAIH,IADXO,IAIZC,EAAgB,GAClB,EAQoD,UAChD,uBACEO,MAAOR,EACPS,KAAK,OACLC,YAAY,sBACZC,SAZe,SAACP,GACpBQ,QAAQC,IAAIT,EAAMU,OAAON,OACzBP,EAAgBG,EAAMU,OAAON,MAC/B,IAWI,iCAAQ,cAGd,CCgBeO,MAjDf,WAGE,MAA4BhB,mBAAS,CACnC,CAAEH,GAAI,EAAGH,IAAK,UACd,CAAEG,GAAI,EAAGH,IAAK,UACd,CAAEG,GAAI,EAAGH,IAAK,UACd,CAAEG,GAAI,EAAGH,IAAK,UACd,CAAEG,GAAI,EAAGH,IAAK,YACd,mBANKuB,EAAM,KAAEC,EAAS,KASlBC,EAAoB,SAACtB,GACzBgB,QAAQC,IAAI,wBAA0BjB,GAEtC,IAGMuB,EAHS,YAAOH,GAGaI,QAAO,SAACC,GAAK,OAAKA,EAAMzB,KAAOA,CAAE,IAGpEqB,EAAUE,EACZ,EAWA,OACE,gCACE,6BAAI,gCACJ,6BACGH,EAAOM,KAAI,SAACD,GAAK,OAChB,cAAC/B,EAAK,CACJE,UAAW6B,EACX1B,cAAeuB,GACVG,EAAMzB,GACV,MAGP,cAACC,EAAS,CAACC,UAtBG,SAACyB,GAEjB,IAAMC,EAAU,YAAOR,GAEvBQ,EAAWC,KAAKF,GAEhBN,EAAUO,EACZ,MAkBF,EC9CME,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC,EAAG,M","file":"static/js/main.395880d7.chunk.js","sourcesContent":["export default function Fruit(props) {\r\n  //State\r\n\r\n  // comportement\r\n\r\n  // Affichage (Render)\r\n\r\n  return (\r\n    <li>\r\n      {props.fruitInfo.nom}{\" \"}\r\n      <button onClick={() => props.onFruitDelete(props.fruitInfo.id)}>X</button>\r\n    </li>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function FruitForm({ handleAdd }) {\r\n  //State\r\n  const [nouveauFruit, setNouveauFruit] = useState(\" \");\r\n\r\n  // comportement\r\n  const handleSubmitFruit = (event) => {\r\n    event.preventDefault();\r\n\r\n    //2. manipulation sur la copie du state\r\n\r\n    const id = new Date().getTime();\r\n    const nom = nouveauFruit;\r\n    const addFruit = { id, nom };\r\n    //fruitsCopy.push(addFruit);\r\n    handleAdd(addFruit);\r\n    setNouveauFruit(\"\"); //Pour rafraichir l'input\r\n  };\r\n  const handleChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNouveauFruit(event.target.value);\r\n  };\r\n  // Affichage (Render)\r\n\r\n  return (\r\n    <form action=\"submit\" onSubmit={handleSubmitFruit}>\r\n      <input\r\n        value={nouveauFruit}\r\n        type=\"text\"\r\n        placeholder=\"ajouter un fruit...\"\r\n        onChange={handleChange}\r\n      />\r\n      <button>ajouter</button>\r\n    </form>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport Fruit from \"./components/Fruit\";\nimport FruitForm from \"./components/FruitForm\";\nfunction App() {\n  //State ( état, données dynamique)\n\n  const [fruits, setFruits] = useState([\n    { id: 1, nom: \"Ananas\" },\n    { id: 2, nom: \"Banane\" },\n    { id: 3, nom: \"Mangue\" },\n    { id: 4, nom: \"Papaye\" },\n    { id: 5, nom: \"Orange\" }\n  ]);\n\n  // Comportements\n  const handleDeleteFruit = (id) => {\n    console.log(\"handleDeleteFruit   =\" + id);\n    //1.copy du state\n    const fruitCopy = [...fruits]; //Spread operator pour créer une copie d'un tableau\n\n    // 2.manipuler le state\n    const fruitCopyUpdated = fruitCopy.filter((fruit) => fruit.id !== id); // methode filter() des tableau JS créer un deuxieme tableau a partir du premier selon des conditions\n\n    //3. modifier mon state avec le setter\n    setFruits(fruitCopyUpdated); // Mis à jour des données\n  };\n  const handleAdd = (addFruit) => {\n    //1. copie du state\n    const fruitsCopy = [...fruits]; //Spread operator pour créer une copie d'un tableau\n    //2. manipulation sur la copie du state\n    fruitsCopy.push(addFruit);\n    //3. modifier le state avec le setter\n    setFruits(fruitsCopy); // Ajouter un nouveau fruit\n  };\n\n  // Render ( affichage) Les accolades permettent de récupérer un state\n  return (\n    <div>\n      <h1> Liste de Fruits Exotiques </h1>\n      <ul>\n        {fruits.map((fruit) => (\n          <Fruit\n            fruitInfo={fruit}\n            onFruitDelete={handleDeleteFruit}\n            key={fruit.id}\n          /> //Insertion du component, ne pas oublier d'importer le component\n        ))}\n      </ul>\n      <FruitForm handleAdd={handleAdd} />\n    </div>\n  );\n}\nexport default App;\n\n//Gestion du formulaire:\n\n//1. Creation du formulaire\n//2. Soumission  du formulaire\n//3. Collecte des données du formulaire\n//3a. méthode 1:documentGetElementById \"React\" avec useRef\n//3b. méthode 2: sync decendante / ascendante (onChange / handleChange)\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}